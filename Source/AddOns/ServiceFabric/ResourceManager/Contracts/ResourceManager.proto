// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "ResourceManager";
option java_outer_classname = "ResourceManagerProto";
option objc_class_prefix = "RTG";

package ResourceManager.Contracts;

service ResourceManagerService {
  // Create and allocate a new resource
  rpc CreateResource(CreateResourceRequest) returns (CreateResourceResponse) {}

  // Delete resource from the service storage
  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse) {}

  // List all the resource types supported in this service
  rpc ListResourceTypes(ListResourceTypesRequest) returns (stream ResourceTypesResponse) {}
}

message CreateResourceRequest {
  // The request ID to help with idempotency
  string RequestId = 1;

  // The type of resource to create in resource manager
  string ResourceType = 2;

  // The service requesting the resource creation
  string OwningService = 3;

  // The service partition requesting the resource creation
  string OwningPartition = 4;

  // The resource in the service requesting the resource creation
  string OwningResource = 5;
}

message CreateResourceResponse {
  // Result of the creation request
  string Result = 1;

  // The URI of the service which owns the resource
  string ServiceLocation = 2;

  // The URI of the service which owns the resource
  string PartitionDetails = 3;

  // The resource ID of the resource created
  string ResourceId = 4;
}

message DeleteResourceRequest {
  // The request ID to help with idempotency
  string RequestId = 1;

  // The URI of the service which owns the resource
  string ServiceLocation = 2;

  // The URI of the service which owns the resource
  string PartitionDetails = 3;

  // The resource ID of the resource created
  string ResourceId = 4;
}

message DeleteResourceResponse {
  // Result of the deletion request
  string Result = 1;

  // The URI of the service which owns the resource
  string ServiceLocation = 2;

  // The URI of the service which owns the resource
  string PartitionDetails = 3;

  // The resource ID of the resource created
  string ResourceId = 4;
}

message ListResourceTypesRequest {
}

message ResourceTypesResponse {
  // The resource type
  string ResourceType = 1;

  // The total number of resource managed in this service
  uint64 Count = 2;
}
